const CACHE_NAME = "professional-timer-v1.0.0";const urlsToCache = [ "./","./index.html","./manifest.json","./service-worker.js","./timer-terminer-342934.mp3" ];self.addEventListener("install",(event) =>{event.waitUntil( caches.open(CACHE_NAME).then((cache) =>{console.log("Opened cache");return Promise.allSettled( urlsToCache.map(url => cache.add(url).catch(error =>{console.warn(`Failed to cache ${url}:`,error);return null}) ) )}) )});self.addEventListener("fetch",(event) =>{if (event.request.method !== "GET"){return}event.respondWith( caches.match(event.request).then((response) =>{return response || fetch(event.request).then((fetchResponse) =>{if (!fetchResponse || fetchResponse.status !== 200){return fetchResponse}const responseToCache = fetchResponse.clone();caches.open(CACHE_NAME).then((cache) =>{cache.put(event.request,responseToCache).catch(error =>{console.warn("Failed to cache response:",error)})});return fetchResponse}).catch(error =>{console.warn("Fetch failed:",error);return new Response("Offline content not available",{status:503,statusText:"Service Unavailable"})})}) )});self.addEventListener("activate",(event) =>{event.waitUntil( caches.keys().then((keyList) => Promise.all( keyList.map((key) =>{if (key !== CACHE_NAME){console.log("Deleting old cache:",key);return caches.delete(key)}}) ) ) )});self.addEventListener("sync",(event) =>{if (event.tag === "background-sync"){event.waitUntil(doBackgroundSync())}});function doBackgroundSync(){console.log("Background sync triggered");return Promise.resolve()}